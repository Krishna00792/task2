'useReducer' example: 

import React, { useReducer } from 'react';

function Counter() {
  const initialState = { count: 0 };
  
  function reducer(state, action) {
    switch (action.type) {
      case 'increment':
        return { count: state.count + 1 };
      case 'decrement':
        return { count: state.count - 1 };
        case 'multiple':
          return { count: state.count * 2 };
          case 'division':
            return { count: state.count / 2};
            case 'zero':
            return { count: state.count = 0 };
      default:
        throw new Error();
    }
  }

  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <center>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
      <button onClick={() => dispatch({ type: 'multiple' })}>Multiple</button>
      <button onClick={() => dispatch({ type: 'division' })}>Division</button>
      <button onClick={() => dispatch({ type: 'zero' })}>Reset</button>
      </center>
    </div>
  );
}

export default Counter;


useEffect Example: in useEffect we need to give dependecy to re-render the things

import React , {useState, useEffect} from 'react'

const App = () => {
  const [count, setCount] = useState(0);
  useEffect(() => console.log(count), [count])
  
  return (
    <div>
      <p> You Clicked {count} times </p>
      <button onClick={()=> setCount(count + 1)}>Click Me</button>
    </div>
  )
}

export default App;


import React, {Component} from 'react';
import Display from './Display';

export default class App extends Component{
  state = {
    name: "BAGRANG DAL"
  }
  render() {
    return(
      <div>
       <Display name = {this.state.name} />
      </div>
    )
  }
}



import React, { Component } from 'react'

export default class Display extends Component {
  render(){
    return(
      <div>
        <center>
            <h1>This is from display {this.props.name} </h1>
        </center>
      </div>
    )
  }
}



// counter using useState

import React, { useState } from "react";

function App() {
  const [count, setCount] = useState(0);

  const handleIncrement = () => {
    setCount(count + 1);
  };

  const handleDecrement = () => {
    setCount(count - 1);
  };


  return (
    <div>
      <center>
      <h1>Counter: {count}</h1>
      <button onClick={handleIncrement}>Increment</button>
      <button onClick={handleDecrement}>Decrement</button>
      </center>
    </div>
  );
}

export default App;


// Counter using hooks(useState)

import React, {useState} from 'react'

const App = () => {
  const [count, setState] = useState(0);

  return(
    <div>
      <center>
        <h1> {count} </h1>
        <button onClick={ () => setState(count+1)}>Increase</button>
      </center>
    </div>
  )
}

export default App;

// React hooks concepts : useState to change the variable

import React, {useState} from 'react';

const App = () => {
  const [name, setState] = useState("Jai Shree Ram");
  return(
    <div>
      <center>
        <h1> {name} </h1>
        <button onClick={ () => setState ("Hare Krishna")}>Click Me</button>
      </center>
    </div>
  )
}

export default App;